# -*- coding: utf-8 -*-
"""aikit_xgboost_incidents.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DxPZCNyOFh10myyb5K5YS8HV823S3K89

# Intel optimized XGBoost
"""

import xgboost as xgb
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import pandas as pd
import numpy as np

df = pd.read_csv('incident_classification_postprocess.csv')

# Divide the data into 75% training and 25% testing data
train_data = df.cleaned_issue_description_postprocess[0:int(0.75*len(df))]
test_data = df.cleaned_issue_description_postprocess[int(0.75*len(df))+1:]
train_target = df.label[0:int(0.75*len(df))]
test_target = df.label[int(0.75*len(df))+1:]

len(test_target)

# convert the text into numeric form, so that the ML model can be applied to them
stop_words = ['in', 'of', 'at', 'a', 'the']
ngram_vectorizer = CountVectorizer(binary=True, ngram_range=(1, 3), stop_words=stop_words)
ngram_vectorizer.fit(train_data)
X_train = ngram_vectorizer.transform(train_data)
X_test = ngram_vectorizer.transform(test_data)

#from xgboost import XGBClassifier
model = xgb.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
              colsample_bynode=1, colsample_bytree=1, eval_metric='mlogloss',
              gamma=0, gpu_id=0, importance_type='gain',
              interaction_constraints='', learning_rate=0.300000012,
              max_delta_step=0, max_depth=6, min_child_weight=1, missing=np.nan,
              n_estimators=100, n_jobs=16,
              num_parallel_tree=1, objective='multi:softprob', random_state=0,
              reg_alpha=0, reg_lambda=1, scale_pos_weight=None, subsample=1,
              tree_method='exact', use_label_encoder=False,
              validate_parameters=1)

model.fit(X_train, train_target)

y_pred = model.predict(X_test)
len(y_pred)

accuracy = accuracy_score(test_target, y_pred)
accuracy